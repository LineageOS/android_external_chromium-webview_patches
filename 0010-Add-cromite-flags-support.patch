From bd587bd93efe7e075bcd18b7d9cf1902ccd2818c Mon Sep 17 00:00:00 2001
From: uazo <uazo@users.noreply.github.com>
Date: Sat, 18 Nov 2023 09:41:28 +0000
Subject: [PATCH 10/12] Add cromite flags support

Add SET_CROMITE_FEATURE_ENABLED*, SET_CROMITE_FEATURE_DISABLED*
and CROMITE_FEATURE macros, logic has been adapted from that found
in brave.
Allows flags to be defined in separate files.
Activates a new cromite tab in chrome://flags with only the flags
added and changed. In android added chrome://flags/cromite
in the setting ui.

Need: bromite-build-utils.patch
License: GPL-2.0-or-later - https://spdx.org/licenses/GPL-2.0-or-later.html

Change-Id: Idff60cba408b3a031e0c01940b52cebb836787a5
---
 base/BUILD.gn                                 |   4 +-
 base/android/feature_map.cc                   |   5 +
 .../base/cached_flags/ValuesReturned.java     |   2 +-
 base/feature_list.cc                          |  76 ++++++++
 base/feature_list.h                           |  72 +++++++-
 build/android/gyp/java_cpp_features.py        |  17 ++
 chrome/android/java/res/values/values.xml     |   3 +
 .../java/res/xml/privacy_preferences.xml      |   4 +
 .../settings/AccessibilitySettings.java       |   5 +-
 .../homepage/settings/HomepageSettings.java   |   2 +-
 .../privacy/settings/PrivacySettings.java     |   2 +-
 .../settings/FragmentDependencyProvider.java  |  10 +-
 .../browser/settings/SettingsActivity.java    |  42 ++++-
 chrome/browser/about_flags.cc                 |  11 ++
 chrome/browser/browser_features.cc            |   1 +
 chrome/browser/browser_features.h             |   1 +
 chrome/browser/flags/BUILD.gn                 |  13 ++
 .../flags/android/chrome_feature_list.cc      |   1 +
 .../flags/android/chrome_feature_list.h       |   1 +
 .../browser/flags/ChromeFeatureList.java      |  13 +-
 .../flags/cromite/include_all_directory.java  |   1 +
 .../java_template/CromiteCachedFlag.java.tmpl |  47 +++++
 chrome/browser/settings/BUILD.gn              |   1 +
 .../settings/ChromeBaseSettingsFragment.java  |  50 +++++
 .../strings/android_chrome_strings.grd        |   1 +
 .../Add-cromite-flags-support.grdp            |   9 +
 .../placeholder.txt                           |   1 +
 chrome/browser/ui/ui_features.cc              |   1 +
 chrome/common/chrome_features.cc              |   1 +
 .../res/xml/accessibility_preferences.xml     |   3 +-
 .../android/java/res/values/attrs.xml         |   4 +
 .../settings/ChromeSwitchPreference.java      |  20 ++
 .../components/cached_flags/CachedFlag.java   |   9 +-
 components/components_strings.grd             |   1 +
 .../content_settings/core/common/features.cc  |   1 +
 .../placeholder.txt                           |   1 +
 components/flags_ui/flags_state.cc            |  54 ++++++
 components/flags_ui/resources/app.css         |  24 +++
 components/flags_ui/resources/app.html.ts     |  28 +++
 components/flags_ui/resources/app.ts          |  23 +++
 components/flags_ui/resources/experiment.css  |   7 +-
 .../flags_ui/resources/experiment.html.ts     |   7 +-
 components/flags_ui/resources/experiment.ts   |  14 +-
 .../flags_ui/resources/flags_browser_proxy.ts |   5 +
 .../core/offline_page_feature.cc              |   1 +
 .../offline_pages/core/offline_page_feature.h |   1 +
 .../browser/features/password_features.cc     |   1 +
 components/permissions/features.cc            |   1 +
 ...nthetic_trials_active_group_id_provider.cc |   4 +-
 ...ynthetic_trials_active_group_id_provider.h |   4 +-
 .../version_ui/version_handler_helper.cc      |   4 +-
 content/common/features.cc                    |   1 +
 content/public/common/content_features.cc     |   1 +
 content/public/common/content_features.h      |   1 +
 cromite_flags/BUILD.gn                        | 174 ++++++++++++++++++
 .../browser/about_flags_cc/placeholder.txt    |   1 +
 .../browser_features_cc/placeholder.txt       |   1 +
 .../browser_features_h/placeholder.txt        |   1 +
 .../chrome_feature_list_cc/placeholder.txt    |   1 +
 .../chrome_feature_list_h/placeholder.txt     |   1 +
 .../browser/ui/ui_features_cc/placeholder.txt |   1 +
 .../common/chrome_features_cc/placeholder.txt |   1 +
 .../common/chrome_features_h/placeholder.txt  |   1 +
 .../core/common/features_cc/placeholder.txt   |   1 +
 .../offline_page_feature_cc/placeholder.txt   |   1 +
 .../offline_page_feature_h/placeholder.txt    |   1 +
 .../password_features_cc/placeholder.txt      |   1 +
 .../permissions/features_cc/placeholder.txt   |   1 +
 .../common/features_cc/placeholder.txt        |   1 +
 .../content_features_cc/placeholder.txt       |   1 +
 .../common/content_features_h/placeholder.txt |   1 +
 .../base/media_switches_cc/placeholder.txt    |   1 +
 .../base/media_switches_h/placeholder.txt     |   1 +
 .../net/base/features_cc/placeholder.txt      |   1 +
 .../net/base/features_h/placeholder.txt       |   1 +
 .../public/cpp/features_cc/placeholder.txt    |   1 +
 .../public/cpp/features_h/placeholder.txt     |   1 +
 .../blink/common/features_cc/placeholder.txt  |   1 +
 .../blink/common/features_h/placeholder.txt   |   1 +
 .../ui/base/features_cc/placeholder.txt       |   1 +
 .../ui/base/features_h/placeholder.txt        |   1 +
 media/base/media_switches.cc                  |   2 +-
 media/base/media_switches.h                   |   2 +-
 net/base/features.cc                          |   1 +
 net/base/features.h                           |   1 +
 services/network/public/cpp/features.cc       |   1 +
 services/network/public/cpp/features.h        |   1 +
 third_party/blink/common/features.cc          |   1 +
 third_party/blink/public/common/features.h    |   1 +
 ui/base/ui_base_features.cc                   |   1 +
 ui/base/ui_base_features.h                    |   1 +
 91 files changed, 801 insertions(+), 28 deletions(-)
 create mode 100644 chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/cromite/include_all_directory.java
 create mode 100644 chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/cromite/java_template/CromiteCachedFlag.java.tmpl
 create mode 100644 chrome/browser/ui/android/strings/cromite_android_chrome_strings_grd/Add-cromite-flags-support.grdp
 create mode 100644 chrome/browser/ui/android/strings/cromite_android_chrome_strings_grd/placeholder.txt
 create mode 100644 components/cromite_components_strings_grd/placeholder.txt
 create mode 100755 cromite_flags/BUILD.gn
 create mode 100755 cromite_flags/chrome/browser/about_flags_cc/placeholder.txt
 create mode 100755 cromite_flags/chrome/browser/browser_features_cc/placeholder.txt
 create mode 100755 cromite_flags/chrome/browser/browser_features_h/placeholder.txt
 create mode 100755 cromite_flags/chrome/browser/flags/android/chrome_feature_list_cc/placeholder.txt
 create mode 100755 cromite_flags/chrome/browser/flags/android/chrome_feature_list_h/placeholder.txt
 create mode 100755 cromite_flags/chrome/browser/ui/ui_features_cc/placeholder.txt
 create mode 100755 cromite_flags/chrome/common/chrome_features_cc/placeholder.txt
 create mode 100755 cromite_flags/chrome/common/chrome_features_h/placeholder.txt
 create mode 100755 cromite_flags/components/content_settings/core/common/features_cc/placeholder.txt
 create mode 100755 cromite_flags/components/offline_pages/core/offline_page_feature_cc/placeholder.txt
 create mode 100755 cromite_flags/components/offline_pages/core/offline_page_feature_h/placeholder.txt
 create mode 100755 cromite_flags/components/password_manager/core/browser/features/password_features_cc/placeholder.txt
 create mode 100755 cromite_flags/components/permissions/features_cc/placeholder.txt
 create mode 100755 cromite_flags/content/common/features_cc/placeholder.txt
 create mode 100755 cromite_flags/content/public/common/content_features_cc/placeholder.txt
 create mode 100755 cromite_flags/content/public/common/content_features_h/placeholder.txt
 create mode 100755 cromite_flags/media/base/media_switches_cc/placeholder.txt
 create mode 100755 cromite_flags/media/base/media_switches_h/placeholder.txt
 create mode 100755 cromite_flags/net/base/features_cc/placeholder.txt
 create mode 100755 cromite_flags/net/base/features_h/placeholder.txt
 create mode 100755 cromite_flags/services/network/public/cpp/features_cc/placeholder.txt
 create mode 100755 cromite_flags/services/network/public/cpp/features_h/placeholder.txt
 create mode 100755 cromite_flags/third_party/blink/common/features_cc/placeholder.txt
 create mode 100755 cromite_flags/third_party/blink/common/features_h/placeholder.txt
 create mode 100755 cromite_flags/ui/base/features_cc/placeholder.txt
 create mode 100755 cromite_flags/ui/base/features_h/placeholder.txt

diff --git a/base/BUILD.gn b/base/BUILD.gn
index 5dee8a9226d24..9d6c7f64b7989 100644
--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -163,6 +163,8 @@ use_epoll = is_linux || is_chromeos || is_android
 # This does not include test code (test support and anything in the test
 # directory) which should use source_set as is recommended for GN targets).
 component("base") {
+  deps = [ "//cromite_flags", ]
+
   sources = [
     "allocator/allocator_check.cc",
     "allocator/allocator_check.h",
@@ -1005,7 +1007,7 @@ component("base") {
     "//build/config/compiler:wglobal_constructors",
   ]
 
-  deps = [
+  deps += [
     ":check_version_internal",
     "//base/allocator:buildflags",
     "//base/third_party/cityhash",
diff --git a/base/android/feature_map.cc b/base/android/feature_map.cc
index 817fdcdd030f0..f929248aa29ba 100644
--- a/base/android/feature_map.cc
+++ b/base/android/feature_map.cc
@@ -46,6 +46,11 @@ const Feature* FeatureMap::FindFeatureExposedToJava(
 static jboolean JNI_FeatureMap_IsEnabled(JNIEnv* env,
                                          jlong jfeature_map,
                                          std::string& feature_name) {
+  if (base::FeatureList::IsCromiteFlag(feature_name)) {
+    const base::Feature* cromite_feature =
+      base::FeatureList::GetCromiteFlag(feature_name);
+    return base::FeatureList::IsEnabled(*cromite_feature);
+  }
   FeatureMap* feature_map = reinterpret_cast<FeatureMap*>(jfeature_map);
   const base::Feature* feature =
       feature_map->FindFeatureExposedToJava(feature_name);
diff --git a/base/android/java/src/org/chromium/base/cached_flags/ValuesReturned.java b/base/android/java/src/org/chromium/base/cached_flags/ValuesReturned.java
index a64813f18c055..7244acc9cfd94 100644
--- a/base/android/java/src/org/chromium/base/cached_flags/ValuesReturned.java
+++ b/base/android/java/src/org/chromium/base/cached_flags/ValuesReturned.java
@@ -16,7 +16,7 @@ import java.util.Map;
 /** Keeps track of values returned for cached flags and field trial parameters. */
 public abstract class ValuesReturned {
     @GuardedBy("sBoolValues")
-    private static final Map<String, Boolean> sBoolValues = new HashMap<>();
+    public static final Map<String, Boolean> sBoolValues = new HashMap<>();
 
     @GuardedBy("sStringValues")
     private static final Map<String, String> sStringValues = new HashMap<>();
diff --git a/base/feature_list.cc b/base/feature_list.cc
index 8a2aa7acdbf09..a8a43fad912c3 100644
--- a/base/feature_list.cc
+++ b/base/feature_list.cc
@@ -42,6 +42,31 @@
 
 namespace base {
 
+namespace internal {
+
+using DefaultStateOverrides =
+    flat_map<const Feature*, FeatureState>;
+
+constexpr size_t kDefaultStateOverridesReserve = 64 * 4;
+
+DefaultStateOverrides& GetListOfNewFeatureState() {
+  static NoDestructor<DefaultStateOverrides>
+      startup_default_state_overrides([] {
+        DefaultStateOverrides v;
+        v.reserve(kDefaultStateOverridesReserve);
+        return v;
+      }());
+  return *startup_default_state_overrides;
+}
+
+FeatureDefaultStateOverrider::FeatureDefaultStateOverrider(
+    const Feature& feature, FeatureState state) {
+  auto& default_state_overrides = GetListOfNewFeatureState();
+  default_state_overrides.insert({&feature, state});
+}
+
+} // namespace internal
+
 namespace {
 
 // Pointer to the FeatureList instance singleton that was set via
@@ -469,6 +494,46 @@ bool FeatureList::IsEnabled(const Feature& feature) {
   return g_feature_list_instance->IsFeatureEnabled(feature);
 }
 
+// static
+bool FeatureList::IsCromiteChanged(const Feature& feature) {
+  for(auto const& [key, value]: internal::GetListOfNewFeatureState()) {
+    if (key->name == feature.name) {
+      return true;
+    }
+  }
+  return false;
+}
+
+// static
+const base::Feature* FeatureList::GetCromiteFlag(const std::string& feature_name) {
+  for(auto const& [key, value]: internal::GetListOfNewFeatureState()) {
+    if (key->name == feature_name && key->is_cromite) {
+      return key;
+    }
+  }
+  NOTREACHED();
+}
+
+// static
+bool FeatureList::IsCromiteFlag(const std::string& feature_name) {
+  for(auto const& [key, value]: internal::GetListOfNewFeatureState()) {
+    if (key->name == feature_name && key->is_cromite) {
+      return true;
+    }
+  }
+  return false;
+}
+
+// static
+bool FeatureList::GetCromiteChange(const Feature& feature) {
+  for(auto const& [key, value]: internal::GetListOfNewFeatureState()) {
+    if (key->name == feature.name) {
+      return value == base::FEATURE_ENABLED_BY_DEFAULT;
+    }
+  }
+  NOTREACHED();
+}
+
 // static
 bool FeatureList::IsValidFeatureOrFieldTrialName(std::string_view name) {
   return IsStringASCII(name) && name.find_first_of(",<*") == std::string::npos;
@@ -735,6 +800,17 @@ void FeatureList::VisitFeaturesAndParams(FeatureVisitor& visitor,
 
 void FeatureList::FinalizeInitialization() {
   DCHECK(!initialized_);
+  //LOG(INFO) << "---FinalizeInitialization";
+  for(auto const& [key, value]: internal::GetListOfNewFeatureState()) {
+    // LOG(INFO) << "---key " << key->name
+    //           << " "
+    //           << (value == base::FEATURE_ENABLED_BY_DEFAULT ? "1" : "0");
+    RegisterOverride(key->name,
+        value == base::FEATURE_ENABLED_BY_DEFAULT
+          ? OverrideState::OVERRIDE_ENABLE_FEATURE
+          : OverrideState::OVERRIDE_DISABLE_FEATURE,
+        /* field_trial = */ nullptr);
+  }
   // Store the field trial list pointer for DCHECKing.
   field_trial_list_ = FieldTrialList::GetInstance();
   initialized_ = true;
diff --git a/base/feature_list.h b/base/feature_list.h
index 8e595511eb398..d57986e4f4b39 100644
--- a/base/feature_list.h
+++ b/base/feature_list.h
@@ -166,8 +166,10 @@ enum class FeatureMacroHandshake { kSecret };
 struct BASE_EXPORT LOGICALLY_CONST Feature {
   constexpr Feature(const char* name,
                     FeatureState default_state,
-                    internal::FeatureMacroHandshake)
-      : name(name), default_state(default_state) {
+                    internal::FeatureMacroHandshake,
+                    bool cromite = false, bool is_new_flag = false)
+      : name(name), default_state(default_state),
+        is_cromite(cromite), is_new(is_new_flag) {
 #if BUILDFLAG(ENABLE_BANNED_BASE_FEATURE_PREFIX)
     if (std::string_view(name).find(BUILDFLAG(BANNED_BASE_FEATURE_PREFIX)) ==
         0) {
@@ -194,6 +196,9 @@ struct BASE_EXPORT LOGICALLY_CONST Feature {
   // command line switch.
   const FeatureState default_state;
 
+  const bool is_cromite = false;
+  const bool is_new = false;
+
  private:
   friend class FeatureList;
 
@@ -469,6 +474,11 @@ class BASE_EXPORT FeatureList {
   // instance, which is checked in builds with DCHECKs enabled.
   static bool IsEnabled(const Feature& feature);
 
+  static bool IsCromiteFlag(const std::string& featureName);
+  static const base::Feature* GetCromiteFlag(const std::string& featureName);
+  static bool IsCromiteChanged(const Feature& feature);
+  static bool GetCromiteChange(const Feature& feature);
+
   // Some characters are not allowed to appear in feature names or the
   // associated field trial names, as they are used as special characters for
   // command-line serialization. This function checks that the strings are ASCII
@@ -734,4 +744,62 @@ class BASE_EXPORT FeatureList {
 
 }  // namespace base
 
+namespace base {
+namespace internal {
+
+// Perform base::Feature duplicates check and fills overriden states into a
+// map that is used at runtime to get an override if available.
+class BASE_EXPORT FeatureDefaultStateOverrider {
+ public:
+  using FeatureOverrideInfo =
+      std::pair<std::reference_wrapper<const Feature>, FeatureState>;
+
+  FeatureDefaultStateOverrider(
+      const Feature& feature, FeatureState state);
+};
+
+}  // namespace internal
+}  // namespace base
+
+#define CROMITE_FEATURE(feature, name, default_state) \
+  constinit const base::Feature feature(name, default_state, base::internal::FeatureMacroHandshake::kSecret, true, true); \
+  _Pragma("clang diagnostic push")                              \
+  _Pragma("clang diagnostic ignored \"-Wglobal-constructors\"") \
+  static const ::base::internal::FeatureDefaultStateOverrider   \
+      g_feature_default_state_overrider_ ##feature {feature, default_state}; \
+  _Pragma("clang diagnostic pop")                               \
+  static_assert(true, "") /* for a semicolon requirement */
+
+#define SET_CROMITE_FEATURE_ENABLED(feature) \
+  _Pragma("clang diagnostic push")                              \
+  _Pragma("clang diagnostic ignored \"-Wglobal-constructors\"") \
+  static const ::base::internal::FeatureDefaultStateOverrider   \
+      g_feature_default_state_overrider_ ##feature {feature, base::FEATURE_ENABLED_BY_DEFAULT}; \
+  _Pragma("clang diagnostic pop")                               \
+  static_assert(true, "") /* for a semicolon requirement */
+
+#define SET_CROMITE_FEATURE_DISABLED(feature) \
+  _Pragma("clang diagnostic push")                              \
+  _Pragma("clang diagnostic ignored \"-Wglobal-constructors\"") \
+  static const ::base::internal::FeatureDefaultStateOverrider   \
+      g_feature_default_state_overrider_ ##feature {feature, base::FEATURE_DISABLED_BY_DEFAULT}; \
+  _Pragma("clang diagnostic pop")                               \
+  static_assert(true, "") /* for a semicolon requirement */
+
+#define SET_CROMITE_FEATURE_ENABLED_W_NAMESPACE(namespace_value, feature) \
+  _Pragma("clang diagnostic push")                              \
+  _Pragma("clang diagnostic ignored \"-Wglobal-constructors\"") \
+  static const ::base::internal::FeatureDefaultStateOverrider   \
+      g_feature_default_state_overrider_ ##feature {namespace_value::feature, base::FEATURE_ENABLED_BY_DEFAULT}; \
+  _Pragma("clang diagnostic pop")                               \
+  static_assert(true, "") /* for a semicolon requirement */
+
+#define SET_CROMITE_FEATURE_DISABLED_W_NAMESPACE(namespace_value, feature) \
+  _Pragma("clang diagnostic push")                              \
+  _Pragma("clang diagnostic ignored \"-Wglobal-constructors\"") \
+  static const ::base::internal::FeatureDefaultStateOverrider   \
+      g_feature_default_state_overrider_ ##feature {namespace_value::feature, base::FEATURE_DISABLED_BY_DEFAULT}; \
+  _Pragma("clang diagnostic pop")                               \
+  static_assert(true, "") /* for a semicolon requirement */
+
 #endif  // BASE_FEATURE_LIST_H_
diff --git a/build/android/gyp/java_cpp_features.py b/build/android/gyp/java_cpp_features.py
index 10639a54895f1..eb69b11976960 100755
--- a/build/android/gyp/java_cpp_features.py
+++ b/build/android/gyp/java_cpp_features.py
@@ -22,10 +22,27 @@ class FeatureParserDelegate(java_cpp_utils.CppConstantParser.Delegate):
   #   ExtractConstantName() -> 'ConstantName'
   #   ExtractValue() -> '"StringNameOfTheFeature"'
   FEATURE_RE = re.compile(r'BASE_FEATURE\(k([^,]+),')
+
+  FEATURE_RE1 = re.compile(r'CROMITE_FEATURE\(k([^,]+),')
+  FEATURE_RE2 = re.compile(r'CROMITE_FEATURE_KEEP_DISABLED\(k([^,]+),')
+  FEATURE_RE3 = re.compile(r'CROMITE_FEATURE_DISABLED\(k([^,]+),')
+  FEATURE_RE4 = re.compile(r'CROMITE_FEATURE_KEEP_ENABLED\(k([^,]+),')
+  FEATURE_RE5 = re.compile(r'CROMITE_FEATURE_ENABLED\(k([^,]+),')
+
   VALUE_RE = re.compile(r'\s*("(?:\"|[^"])*")\s*,')
 
   def ExtractConstantName(self, line):
     match = FeatureParserDelegate.FEATURE_RE.match(line)
+    if match is None:
+      match = FeatureParserDelegate.FEATURE_RE1.match(line)
+    if match is None:
+      match = FeatureParserDelegate.FEATURE_RE2.match(line)
+    if match is None:
+      match = FeatureParserDelegate.FEATURE_RE3.match(line)
+    if match is None:
+      match = FeatureParserDelegate.FEATURE_RE4.match(line)
+    if match is None:
+      match = FeatureParserDelegate.FEATURE_RE5.match(line)
     return match.group(1) if match else None
 
   def ExtractValue(self, line):
diff --git a/chrome/android/java/res/values/values.xml b/chrome/android/java/res/values/values.xml
index ff31f0f2db984..ad9290a7d29d9 100644
--- a/chrome/android/java/res/values/values.xml
+++ b/chrome/android/java/res/values/values.xml
@@ -9,6 +9,9 @@ found in the LICENSE file.
     xmlns:tools="http://schemas.android.com/tools"
     tools:ignore="MissingTranslation">
 
+    <string name="cromite_flags_title">Open Cromite flags list</string>
+    <string name="cromite_flags_url">chrome://flags/cromite</string>
+
     <!-- Full Screen Constants -->
     <!-- These constants were chosen empirically for their visually pleasant behavior.
          Contact tedchoc@chromium.org or dtrainor@chromium.org for questions about
diff --git a/chrome/android/java/res/xml/privacy_preferences.xml b/chrome/android/java/res/xml/privacy_preferences.xml
index 66a7ae7b15384..004bca72142ea 100644
--- a/chrome/android/java/res/xml/privacy_preferences.xml
+++ b/chrome/android/java/res/xml/privacy_preferences.xml
@@ -55,6 +55,10 @@ found in the LICENSE file.
         android:key="do_not_track"
         android:title="@string/do_not_track_title"
         android:fragment="org.chromium.chrome.browser.privacy.settings.DoNotTrackSettings" />
+    <org.chromium.chrome.browser.about_settings.HyperlinkPreference
+        android:key="cromite_flags"
+        android:title="@string/cromite_flags_title"
+        app:url="@string/cromite_flags_url" />
     <Preference
         android:key="preload_pages"
         android:title="@string/preload_pages_title"
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/accessibility/settings/AccessibilitySettings.java b/chrome/android/java/src/org/chromium/chrome/browser/accessibility/settings/AccessibilitySettings.java
index 8146906a87ced..339c009a516f7 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/accessibility/settings/AccessibilitySettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/accessibility/settings/AccessibilitySettings.java
@@ -19,6 +19,7 @@ import org.chromium.chrome.R;
 import org.chromium.chrome.browser.image_descriptions.ImageDescriptionsController;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.settings.SettingsNavigationFactory;
+import org.chromium.chrome.browser.settings.ChromeBaseSettingsFragment;
 import org.chromium.components.browser_ui.accessibility.AccessibilitySettingsDelegate;
 import org.chromium.components.browser_ui.accessibility.FontSizePrefs;
 import org.chromium.components.browser_ui.accessibility.PageZoomPreference;
@@ -37,7 +38,7 @@ import org.chromium.content_public.browser.ContentFeatureList;
 import org.chromium.content_public.browser.ContentFeatureMap;
 
 /** Fragment to keep track of all the accessibility related preferences. */
-public class AccessibilitySettings extends PreferenceFragmentCompat
+public class AccessibilitySettings extends ChromeBaseSettingsFragment
         implements EmbeddableSettingsPage, Preference.OnPreferenceChangeListener {
     public static final String PREF_PAGE_ZOOM_DEFAULT_ZOOM = "page_zoom_default_zoom";
     public static final String PREF_PAGE_ZOOM_INCLUDE_OS_ADJUSTMENT =
@@ -85,7 +86,7 @@ public class AccessibilitySettings extends PreferenceFragmentCompat
     }
 
     @Override
-    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
+    public void onCreatePreferencesCromite(Bundle savedInstanceState, String rootKey) {
         SettingsUtils.addPreferencesFromResource(this, R.xml.accessibility_preferences);
 
         mPageZoomDefaultZoomPref = (PageZoomPreference) findPreference(PREF_PAGE_ZOOM_DEFAULT_ZOOM);
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/homepage/settings/HomepageSettings.java b/chrome/android/java/src/org/chromium/chrome/browser/homepage/settings/HomepageSettings.java
index a2488eac35a2f..41444910a2c51 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/homepage/settings/HomepageSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/homepage/settings/HomepageSettings.java
@@ -37,7 +37,7 @@ public class HomepageSettings extends ChromeBaseSettingsFragment {
     private final ObservableSupplierImpl<String> mPageTitle = new ObservableSupplierImpl<>();
 
     @Override
-    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
+    public void onCreatePreferencesCromite(Bundle savedInstanceState, String rootKey) {
         mHomepageManager = HomepageManager.getInstance();
 
         mPageTitle.set(getString(R.string.options_homepage_title));
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
index e3b5027f95fba..f2432ec9a4300 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
@@ -81,7 +81,7 @@ public class PrivacySettings extends ChromeBaseSettingsFragment
     private final ObservableSupplierImpl<String> mPageTitle = new ObservableSupplierImpl<>();
 
     @Override
-    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
+    public void onCreatePreferencesCromite(Bundle savedInstanceState, String rootKey) {
         mPageTitle.set(getString(R.string.prefs_privacy_security));
 
         SettingsUtils.addPreferencesFromResource(this, R.xml.privacy_preferences);
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/settings/FragmentDependencyProvider.java b/chrome/android/java/src/org/chromium/chrome/browser/settings/FragmentDependencyProvider.java
index aea200633f928..6dcaa8def1bbe 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/settings/FragmentDependencyProvider.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/settings/FragmentDependencyProvider.java
@@ -12,6 +12,7 @@ import androidx.fragment.app.Fragment;
 import androidx.fragment.app.FragmentManager;
 
 import org.chromium.base.IntentUtils;
+import org.chromium.base.supplier.Supplier;
 import org.chromium.base.supplier.ObservableSupplier;
 import org.chromium.base.supplier.OneshotSupplier;
 import org.chromium.chrome.browser.LaunchIntentDispatcher;
@@ -78,18 +79,21 @@ public class FragmentDependencyProvider extends FragmentManager.FragmentLifecycl
     private final OneshotSupplier<SnackbarManager> mSnackbarManagerSupplier;
     private final OneshotSupplier<BottomSheetController> mBottomSheetControllerSupplier;
     private final ObservableSupplier<ModalDialogManager> mModalDialogManagerSupplier;
+    private final Supplier<ChromeBaseSettingsFragment.RequireRestartDelegate> mRequireRestartDelegateSupplier;
 
     public FragmentDependencyProvider(
             Context context,
             Profile profile,
             OneshotSupplier<SnackbarManager> snackbarManagerSupplier,
             OneshotSupplier<BottomSheetController> bottomSheetControllerSupplier,
-            ObservableSupplier<ModalDialogManager> modalDialogManagerSupplier) {
+            ObservableSupplier<ModalDialogManager> modalDialogManagerSupplier,
+            Supplier<ChromeBaseSettingsFragment.RequireRestartDelegate> requireRestartDelegateSupplier) {
         mContext = context;
         mProfile = profile;
         mSnackbarManagerSupplier = snackbarManagerSupplier;
         mBottomSheetControllerSupplier = bottomSheetControllerSupplier;
         mModalDialogManagerSupplier = modalDialogManagerSupplier;
+        mRequireRestartDelegateSupplier = requireRestartDelegateSupplier;
     }
 
     @Override
@@ -98,6 +102,10 @@ public class FragmentDependencyProvider extends FragmentManager.FragmentLifecycl
             @NonNull Fragment fragment,
             @NonNull Context unusedContext) {
         // Common dependencies attachments.
+        if (fragment instanceof ChromeBaseSettingsFragment) {
+            ((ChromeBaseSettingsFragment)fragment).setRequestRestartDelegateSupplier(
+                mRequireRestartDelegateSupplier);
+        }
         if (fragment instanceof ProfileDependentSetting) {
             ((ProfileDependentSetting) fragment).setProfile(mProfile);
         }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java
index 5d041931eb5df..01083276c5518 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java
@@ -4,6 +4,7 @@
 
 package org.chromium.chrome.browser.settings;
 
+import android.app.Activity;
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.Intent;
@@ -32,7 +33,9 @@ import org.chromium.base.Callback;
 import org.chromium.base.CallbackUtils;
 import org.chromium.base.Log;
 import org.chromium.base.metrics.RecordHistogram;
+import org.chromium.base.supplier.Supplier;
 import org.chromium.base.supplier.ObservableSupplier;
+import org.chromium.base.supplier.OneshotSupplier;
 import org.chromium.base.supplier.OneshotSupplierImpl;
 import org.chromium.chrome.R;
 import org.chromium.chrome.browser.ChromeBaseAppCompatActivity;
@@ -41,12 +44,14 @@ import org.chromium.chrome.browser.back_press.SecondaryActivityBackPressUma.Seco
 import org.chromium.chrome.browser.feedback.HelpAndFeedbackLauncherImpl;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.init.ChromeBrowserInitializer;
+import org.chromium.chrome.browser.lifetime.ApplicationLifetime;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.profiles.ProfileManager;
 import org.chromium.chrome.browser.profiles.ProfileManagerUtils;
 import org.chromium.chrome.browser.ui.device_lock.MissingDeviceLockLauncher;
 import org.chromium.chrome.browser.ui.messages.snackbar.SnackbarManager;
 import org.chromium.chrome.browser.ui.messages.snackbar.SnackbarManager.SnackbarManageable;
+import org.chromium.chrome.browser.ui.messages.snackbar.Snackbar;
 import org.chromium.components.browser_ui.bottomsheet.BottomSheetController;
 import org.chromium.components.browser_ui.bottomsheet.BottomSheetControllerFactory;
 import org.chromium.components.browser_ui.bottomsheet.ManagedBottomSheetController;
@@ -85,6 +90,40 @@ import java.util.Locale;
  */
 public class SettingsActivity extends ChromeBaseAppCompatActivity
         implements PreferenceFragmentCompat.OnPreferenceStartFragmentCallback, SnackbarManageable {
+    private static class RequestRestartDelegate implements ChromeBaseSettingsFragment.RequireRestartDelegate {
+        private OneshotSupplier<SnackbarManager> mSnackbarManagerSupplier;
+        private Activity mActivity;
+
+        RequestRestartDelegate(OneshotSupplier<SnackbarManager> snackbarManagerSupplier,
+                               Activity activity) {
+            mSnackbarManagerSupplier = snackbarManagerSupplier;
+            mActivity = activity;
+        }
+
+        @Override
+        public void RequireRestart() {
+            mSnackbarManagerSupplier.onAvailable(
+                (snackbarManager) -> {
+                    Snackbar mSnackbar = Snackbar.make(mActivity.getString(R.string.ui_relaunch_notice),
+                        new SnackbarManager.SnackbarController() {
+                            @Override
+                            public void onDismissNoAction(Object actionData) { }
+
+                            @Override
+                            public void onAction(Object actionData) {
+                                    ApplicationLifetime.terminate(true);
+                            }
+                        }, Snackbar.TYPE_NOTIFICATION, Snackbar.UMA_UNKNOWN)
+                        .setSingleLine(false)
+                        .setAction(mActivity.getString(R.string.relaunch),
+                                /*actionData*/null)
+                        .setDuration(/*durationMs*/70000);
+                    if (!snackbarManager.isShowing())
+                        snackbarManager.showSnackbar(mSnackbar);
+                });
+        }
+    }
+
     @VisibleForTesting(otherwise = VisibleForTesting.PACKAGE_PRIVATE)
     public static final String EXTRA_SHOW_FRAGMENT = "show_fragment";
 
@@ -151,7 +190,8 @@ public class SettingsActivity extends ChromeBaseAppCompatActivity
                         mProfile,
                         mSnackbarManagerSupplier,
                         mBottomSheetControllerSupplier,
-                        getModalDialogManagerSupplier()),
+                        getModalDialogManagerSupplier(),
+                        () -> new RequestRestartDelegate(mSnackbarManagerSupplier, this)),
                 true /* recursive */);
         fragmentManager.registerFragmentLifecycleCallbacks(
                 new WideDisplayPaddingApplier(), false /* recursive */);
diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index 7613006656aaa..4f626460135a3 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -392,6 +392,10 @@ using flags_ui::kOsLinux;
 using flags_ui::kOsMac;
 using flags_ui::kOsWin;
 
+#define ABOUT_FLAG_INCLUDE_SECTION
+#include "cromite_flags/chrome_browser_about_flags_cc.inc"
+#undef ABOUT_FLAG_INCLUDE_SECTION
+
 namespace about_flags {
 
 namespace {
@@ -4315,6 +4319,10 @@ const FeatureEntry::FeatureVariation kServiceWorkerAutoPreloadVariations[] = {
      std::size(kServiceWorkerAutoPreload_SWNotRunningOnly), nullptr},
 };
 
+#define FEATURE_PARAM_SECTION
+#include "cromite_flags/chrome_browser_about_flags_cc.inc"
+#undef FEATURE_PARAM_SECTION
+
 // RECORDING USER METRICS FOR FLAGS:
 // -----------------------------------------------------------------------------
 // The first line of the entry is the internal name.
@@ -4341,6 +4349,9 @@ const FeatureEntry::FeatureVariation kServiceWorkerAutoPreloadVariations[] = {
 const FeatureEntry kFeatureEntries[] = {
 // Include generated flags for flag unexpiry; see //docs/flag_expiry.md and
 // //tools/flags/generate_unexpire_flags.py.
+#define FLAG_SECTION
+#include "cromite_flags/chrome_browser_about_flags_cc.inc"
+#undef FLAG_SECTION
 #include "build/chromeos_buildflags.h"
 #include "chrome/browser/unexpire_flags_gen.inc"
     {variations::switches::kEnableBenchmarking,
diff --git a/chrome/browser/browser_features.cc b/chrome/browser/browser_features.cc
index 45c767e211f64..0ae4008c4ac22 100644
--- a/chrome/browser/browser_features.cc
+++ b/chrome/browser/browser_features.cc
@@ -372,4 +372,5 @@ BASE_FEATURE(kRemovalOfIWAsFromTabCapture,
              "RemovalOfIWAsFromTabCapture",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
+#include "cromite_flags/chrome_browser_browser_features_cc.inc"
 }  // namespace features
diff --git a/chrome/browser/browser_features.h b/chrome/browser/browser_features.h
index f5d00e9ec9f9e..9b812dba90e1e 100644
--- a/chrome/browser/browser_features.h
+++ b/chrome/browser/browser_features.h
@@ -145,6 +145,7 @@ BASE_DECLARE_FEATURE(kRemovalOfIWAsFromTabCapture);
 // module, e.g.
 // //chrome/browser/<foo_module>/features.h
 //
+#include "cromite_flags/chrome_browser_browser_features_h.inc"
 }  // namespace features
 
 #endif  // CHROME_BROWSER_BROWSER_FEATURES_H_
diff --git a/chrome/browser/flags/BUILD.gn b/chrome/browser/flags/BUILD.gn
index 719aa454915d7..0bb90ba1e685b 100644
--- a/chrome/browser/flags/BUILD.gn
+++ b/chrome/browser/flags/BUILD.gn
@@ -12,9 +12,14 @@ android_library("java") {
     "android/java/src/org/chromium/chrome/browser/flags/ChromeFeatureMap.java",
     "android/java/src/org/chromium/chrome/browser/flags/ChromeSessionState.java",
   ]
+  sources += [
+    "android/java/src/org/chromium/chrome/browser/flags/cromite/include_all_directory.java",
+  ]
   public_deps = [ "//components/cached_flags:java" ]
   deps = [
+    ":java_cromite_cached_flags",
     "//base:base_java",
+    "//base:base_cached_flags_java",
     "//base/version_info/android:version_constants_java",
     "//build:chromeos_buildflags",
     "//build/android:build_java",
@@ -24,12 +29,20 @@ android_library("java") {
     "//third_party/jni_zero:jni_zero_java",
   ]
   srcjar_deps = [
+    ":java_cromite_cached_flags",
     ":chrome_android_java_switches_srcjar",
     ":chrome_browser_flags_enums_srcjar",
     ":jni_headers",
   ]
 }
 
+java_bromite_impl("java_cromite_cached_flags") {
+  inputs = [ "android/java/src/org/chromium/chrome/browser/flags/cromite/include_all_directory.java" ]
+  namespace = "org.chromium.chrome.browser.flags.cromite"
+  template = "android/java/src/org/chromium/chrome/browser/flags/cromite/java_template/CromiteCachedFlag.java.tmpl"
+  static_classes = true
+}
+
 generate_jni("jni_headers") {
   sources = [ "android/java/src/org/chromium/chrome/browser/flags/CromiteNativeUtils.java" ]
   sources += [
diff --git a/chrome/browser/flags/android/chrome_feature_list.cc b/chrome/browser/flags/android/chrome_feature_list.cc
index d3de56ca79f81..98de8d0f29986 100644
--- a/chrome/browser/flags/android/chrome_feature_list.cc
+++ b/chrome/browser/flags/android/chrome_feature_list.cc
@@ -1063,5 +1063,6 @@ BASE_FEATURE(kWebOtpCrossDeviceSimpleString,
              "WebOtpCrossDeviceSimpleString",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
+#include "cromite_flags/chrome_browser_flags_android_chrome_feature_list_cc.inc"
 }  // namespace android
 }  // namespace chrome
diff --git a/chrome/browser/flags/android/chrome_feature_list.h b/chrome/browser/flags/android/chrome_feature_list.h
index 407308d62892f..4f397bb097c6a 100644
--- a/chrome/browser/flags/android/chrome_feature_list.h
+++ b/chrome/browser/flags/android/chrome_feature_list.h
@@ -215,6 +215,7 @@ constexpr base::FeatureParam<std::string> kQuickDeleteAndroidSurveyTriggerId(
     "trigger_id",
     /*default_value=*/"");
 
+#include "cromite_flags/chrome_browser_flags_android_chrome_feature_list_h.inc"
 }  // namespace android
 }  // namespace chrome
 
diff --git a/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/ChromeFeatureList.java b/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/ChromeFeatureList.java
index cfc4746d169e5..0aef026f8bd42 100644
--- a/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/ChromeFeatureList.java
+++ b/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/ChromeFeatureList.java
@@ -17,6 +17,10 @@ import org.chromium.components.cached_flags.DoubleCachedFieldTrialParameter;
 import org.chromium.components.cached_flags.IntCachedFieldTrialParameter;
 import org.chromium.components.cached_flags.StringCachedFieldTrialParameter;
 
+import org.chromium.chrome.browser.flags.cromite.CromiteCachedFlagImplBase;
+import java.util.Arrays;
+import java.util.stream.Collectors;
+
 import java.util.List;
 import java.util.Map;
 
@@ -730,7 +734,7 @@ public abstract class ChromeFeatureList {
     public static final CachedFlag sWebApkMinShellApkVersion =
             newCachedFlag(WEB_APK_MIN_SHELL_APK_VERSION, true);
 
-    public static final List<CachedFlag> sFlagsCachedFullBrowser =
+    public static final List<CachedFlag> sFlagsCachedFullBrowserChromium =
             List.of(
                     sAccountReauthenticationRecentTimeWindow,
                     sAndroidAppIntegration,
@@ -823,6 +827,13 @@ public abstract class ChromeFeatureList {
                     sUseLibunwindstackNativeUnwinderAndroid,
                     sWebApkMinShellApkVersion);
 
+    private static <T> List<T> concatenateLists(List<T>... collections) {
+        return Arrays.stream(collections).flatMap(x -> x.stream()).collect(Collectors.toList());
+    }
+
+    public static final List<CachedFlag> sFlagsCachedFullBrowser =
+            concatenateLists(CromiteCachedFlagImplBase.getList(), sFlagsCachedFullBrowserChromium);
+
     public static final List<CachedFlag> sFlagsCachedInMinimalBrowser = List.of();
 
     public static final List<CachedFlag> sTestCachedFlags =
diff --git a/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/cromite/include_all_directory.java b/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/cromite/include_all_directory.java
new file mode 100644
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/cromite/include_all_directory.java
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/cromite/java_template/CromiteCachedFlag.java.tmpl b/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/cromite/java_template/CromiteCachedFlag.java.tmpl
new file mode 100644
index 0000000000000..3355066539d9f
--- /dev/null
+++ b/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/cromite/java_template/CromiteCachedFlag.java.tmpl
@@ -0,0 +1,47 @@
+/*
+    This file is part of Cromite.
+
+    Cromite is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    Cromite is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with Cromite. If not, see <https://www.gnu.org/licenses/>.
+
+*/
+
+{DESCRIPTION}
+
+package org.chromium.chrome.browser.flags.cromite;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.chromium.components.cached_flags.CachedFlag;
+
+{IMPORT_CLAUSE}
+
+public class CromiteCachedFlagImplBase {{
+
+    static protected final ArrayList<CachedFlag> mItemList;
+
+    private static void add(CachedFlag flag) {{
+        mItemList.add(flag);
+    }}
+
+    public static List<CachedFlag> getList() {{
+        return mItemList;
+    }}
+
+    static {{
+        mItemList = new ArrayList<CachedFlag>();
+{ADD_CLAUSE}
+    }}
+
+}}
diff --git a/chrome/browser/settings/BUILD.gn b/chrome/browser/settings/BUILD.gn
index 75bf794d26e8b..f0c9401135ac0 100644
--- a/chrome/browser/settings/BUILD.gn
+++ b/chrome/browser/settings/BUILD.gn
@@ -35,6 +35,7 @@ android_library("java") {
     "//base:base_java",
     "//chrome/browser/feedback/android:factory_java",
     "//chrome/browser/feedback/android:java",
+    "//chrome/browser/flags:java",
     "//chrome/browser/preferences:java",
     "//chrome/browser/profiles/android:java",
     "//chrome/browser/ui/android/favicon:java",
diff --git a/chrome/browser/settings/android/java/src/org/chromium/chrome/browser/settings/ChromeBaseSettingsFragment.java b/chrome/browser/settings/android/java/src/org/chromium/chrome/browser/settings/ChromeBaseSettingsFragment.java
index c5f90883a93ad..d1b39ab7c674e 100644
--- a/chrome/browser/settings/android/java/src/org/chromium/chrome/browser/settings/ChromeBaseSettingsFragment.java
+++ b/chrome/browser/settings/android/java/src/org/chromium/chrome/browser/settings/ChromeBaseSettingsFragment.java
@@ -7,11 +7,18 @@ package org.chromium.chrome.browser.settings;
 import androidx.annotation.NonNull;
 import androidx.preference.PreferenceFragmentCompat;
 
+import org.chromium.base.supplier.Supplier;
 import org.chromium.chrome.browser.feedback.HelpAndFeedbackLauncher;
 import org.chromium.chrome.browser.feedback.HelpAndFeedbackLauncherFactory;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.components.browser_ui.settings.EmbeddableSettingsPage;
 
+import android.os.Bundle;
+import androidx.preference.Preference;
+import androidx.preference.PreferenceScreen;
+import org.chromium.components.browser_ui.settings.ChromeSwitchPreference;
+import org.chromium.chrome.browser.flags.CromiteNativeUtils;
+
 /**
  * Base class for settings in Chrome.
  *
@@ -22,6 +29,49 @@ public abstract class ChromeBaseSettingsFragment extends PreferenceFragmentCompa
         implements EmbeddableSettingsPage, ProfileDependentSetting {
     private Profile mProfile;
 
+    private Supplier<ChromeBaseSettingsFragment.RequireRestartDelegate> mRequireRestartDelegateSupplier;
+
+    public interface RequireRestartDelegate {
+        void RequireRestart();
+    }
+
+    public void setRequestRestartDelegateSupplier(
+                    Supplier<ChromeBaseSettingsFragment.RequireRestartDelegate> delegate) {
+        mRequireRestartDelegateSupplier = delegate;
+    }
+
+    public void onCreatePreferencesCromite(Bundle savedInstanceState, String rootKey) {
+    }
+
+    @Override
+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
+        onCreatePreferencesCromite(savedInstanceState, rootKey);
+
+        PreferenceScreen prefScreen = getPreferenceScreen();
+        int prefCount = prefScreen.getPreferenceCount();
+
+        for(int i=0; i < prefCount; i++) {
+            Preference pref = prefScreen.getPreference(i);
+            if (pref instanceof ChromeSwitchPreference) {
+                ChromeSwitchPreference switchPref = (ChromeSwitchPreference)pref;
+                String featureName = switchPref.getFeatureName();
+                if (featureName == null)
+                    continue;
+
+                boolean enabled = CromiteNativeUtils.isFlagEnabled(featureName);
+                switchPref.setChecked(enabled);
+
+                switchPref.setOnPreferenceChangeListener((preference, newValue) -> {
+                    CromiteNativeUtils.setFlagEnabled(featureName, (boolean)newValue);
+                    if (switchPref.needRestart()) {
+                        mRequireRestartDelegateSupplier.get().RequireRestart();
+                    }
+                    return true;
+                });
+            }
+        }
+    }
+
     /**
      * @return The profile associated with the current Settings screen.
      */
diff --git a/chrome/browser/ui/android/strings/android_chrome_strings.grd b/chrome/browser/ui/android/strings/android_chrome_strings.grd
index d9df3524d145f..d7611d09aff18 100644
--- a/chrome/browser/ui/android/strings/android_chrome_strings.grd
+++ b/chrome/browser/ui/android/strings/android_chrome_strings.grd
@@ -202,6 +202,7 @@ CHAR_LIMIT guidelines:
   </translations>
   <release seq="1">
     <messages fallback_to_english="true">
+      <part file="cromite_android_chrome_strings_grd/placeholder.txt"/>
       <!-- NOTE: Generic strings used across multiple features belong in //components/browser_ui/strings/android. -->
 
        <!-- Cookie Controls -->
diff --git a/chrome/browser/ui/android/strings/cromite_android_chrome_strings_grd/Add-cromite-flags-support.grdp b/chrome/browser/ui/android/strings/cromite_android_chrome_strings_grd/Add-cromite-flags-support.grdp
new file mode 100644
index 0000000000000..df7c8ced94718
--- /dev/null
+++ b/chrome/browser/ui/android/strings/cromite_android_chrome_strings_grd/Add-cromite-flags-support.grdp
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<grit-part>
+    <message name="IDS_RELAUNCH" desc="Relaunch message">
+        Relaunch
+    </message>
+    <message name="IDS_UI_RELAUNCH_NOTICE" desc="Summary for relaunch message">
+        Your changes will take effect the next time you relaunch Cromite.
+    </message>
+</grit-part>
diff --git a/chrome/browser/ui/android/strings/cromite_android_chrome_strings_grd/placeholder.txt b/chrome/browser/ui/android/strings/cromite_android_chrome_strings_grd/placeholder.txt
new file mode 100644
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/chrome/browser/ui/android/strings/cromite_android_chrome_strings_grd/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/chrome/browser/ui/ui_features.cc b/chrome/browser/ui/ui_features.cc
index 886af67983837..cd3141187ac68 100644
--- a/chrome/browser/ui/ui_features.cc
+++ b/chrome/browser/ui/ui_features.cc
@@ -487,4 +487,5 @@ BASE_FEATURE(kInlineFullscreenPerfExperiment,
              "InlineFullscreenPerfExperiment",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
+#include "cromite_flags/chrome_browser_ui_ui_features_cc.inc"
 }  // namespace features
diff --git a/chrome/common/chrome_features.cc b/chrome/common/chrome_features.cc
index 1010d8d4b20a7..baff1f0a6ca4d 100644
--- a/chrome/common/chrome_features.cc
+++ b/chrome/common/chrome_features.cc
@@ -1629,4 +1629,5 @@ BASE_FEATURE(kPeriodicLogUploadMigration,
              base::FEATURE_DISABLED_BY_DEFAULT);
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH)
 
+#include "cromite_flags/chrome_common_chrome_features_cc.inc"
 }  // namespace features
diff --git a/components/browser_ui/accessibility/android/java/res/xml/accessibility_preferences.xml b/components/browser_ui/accessibility/android/java/res/xml/accessibility_preferences.xml
index 53421c0352337..9eb8d7ec8adb9 100644
--- a/components/browser_ui/accessibility/android/java/res/xml/accessibility_preferences.xml
+++ b/components/browser_ui/accessibility/android/java/res/xml/accessibility_preferences.xml
@@ -5,7 +5,8 @@ Use of this source code is governed by a BSD-style license that can be
 found in the LICENSE file.
 -->
 
-<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+                  xmlns:app="http://schemas.android.com/apk/res-auto">
 
     <org.chromium.components.browser_ui.accessibility.PageZoomPreference
         android:key="page_zoom_default_zoom"
diff --git a/components/browser_ui/settings/android/java/res/values/attrs.xml b/components/browser_ui/settings/android/java/res/values/attrs.xml
index 335867416771a..312f6b731e63e 100644
--- a/components/browser_ui/settings/android/java/res/values/attrs.xml
+++ b/components/browser_ui/settings/android/java/res/values/attrs.xml
@@ -12,6 +12,10 @@ found in the LICENSE file.
     </declare-styleable>
 
     <declare-styleable name="ChromeBasePreference">
+        <!-- Name of a feature bind to this preference -->
+        <attr name="featureName" format="string" />
+        <!-- Need restart after change -->
+        <attr name="needRestart" format="boolean" />
         <!-- The tint color for the icon set by android:icon. -->
         <attr name="iconTint" format="color" />
         <!-- Name of a user action that will be logged when this preference is clicked -->
diff --git a/components/browser_ui/settings/android/widget/java/src/org/chromium/components/browser_ui/settings/ChromeSwitchPreference.java b/components/browser_ui/settings/android/widget/java/src/org/chromium/components/browser_ui/settings/ChromeSwitchPreference.java
index 07d593742f535..388c1bbd59627 100644
--- a/components/browser_ui/settings/android/widget/java/src/org/chromium/components/browser_ui/settings/ChromeSwitchPreference.java
+++ b/components/browser_ui/settings/android/widget/java/src/org/chromium/components/browser_ui/settings/ChromeSwitchPreference.java
@@ -12,6 +12,9 @@ import android.view.accessibility.AccessibilityEvent;
 import android.view.accessibility.AccessibilityNodeInfo;
 import android.widget.TextView;
 
+import androidx.annotation.Nullable;
+import android.content.res.TypedArray;
+
 import androidx.annotation.ColorInt;
 import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
@@ -31,6 +34,11 @@ public class ChromeSwitchPreference extends SwitchPreferenceCompat {
     /** Indicates if the preference uses a custom layout. */
     private final boolean mHasCustomLayout;
 
+    @Nullable
+    private String mFeatureName;
+
+    private final boolean mNeedRestart;
+
     // TOOD(crbug.com/1451550): This is an interim solution. In the long-term, we should migrate
     // away from a switch with dynamically changing summaries onto a radio group.
     /**
@@ -50,6 +58,18 @@ public class ChromeSwitchPreference extends SwitchPreferenceCompat {
 
         mHasCustomLayout = ManagedPreferencesUtils.isCustomLayoutApplied(context, attrs);
         mUseSummaryAsTitle = true;
+        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ChromeBasePreference);
+        mFeatureName = a.getString(R.styleable.ChromeBasePreference_featureName);
+        mNeedRestart = a.getBoolean(R.styleable.ChromeBasePreference_needRestart, false);
+        a.recycle();
+    }
+
+    public String getFeatureName() {
+        return mFeatureName;
+    }
+
+    public boolean needRestart() {
+        return mNeedRestart;
     }
 
     /**
diff --git a/components/cached_flags/android/java/src/org/chromium/components/cached_flags/CachedFlag.java b/components/cached_flags/android/java/src/org/chromium/components/cached_flags/CachedFlag.java
index d64baf86afd6b..a6231917d3027 100644
--- a/components/cached_flags/android/java/src/org/chromium/components/cached_flags/CachedFlag.java
+++ b/components/cached_flags/android/java/src/org/chromium/components/cached_flags/CachedFlag.java
@@ -5,6 +5,7 @@
 package org.chromium.components.cached_flags;
 
 import android.content.SharedPreferences;
+import androidx.annotation.Nullable;
 
 import org.chromium.base.FeatureList;
 import org.chromium.base.FeatureMap;
@@ -136,7 +137,7 @@ public class CachedFlag extends Flag {
         editor.putBoolean(getSharedPreferenceKey(), isEnabledInNative);
     }
 
-    String getSharedPreferenceKey() {
+    public String getSharedPreferenceKey() {
         // Create the key only once to avoid String concatenation every flag check.
         if (mPreferenceKey == null) {
             mPreferenceKey = CachedFlagsSharedPreferences.FLAGS_CACHED.createKey(mFeatureName);
@@ -144,6 +145,12 @@ public class CachedFlag extends Flag {
         return mPreferenceKey;
     }
 
+    public void setValueReturnedOverride(@Nullable Boolean value) {
+        synchronized (ValuesReturned.sBoolValues) {
+            ValuesReturned.sBoolValues.put(getSharedPreferenceKey(), value);
+        }
+    }
+
     /** Create a Map of feature names -> {@link CachedFlag} from multiple lists of CachedFlags. */
     public static Map<String, CachedFlag> createCachedFlagMap(
             List<List<CachedFlag>> allCachedFlagsLists) {
diff --git a/components/components_strings.grd b/components/components_strings.grd
index 3524ba74086d5..64f5496d644c1 100644
--- a/components/components_strings.grd
+++ b/components/components_strings.grd
@@ -281,6 +281,7 @@
   </translations>
   <release seq="1">
     <messages fallback_to_english="true">
+      <part file="cromite_components_strings_grd/placeholder.txt"/>
       <part file="arc_strings.grdp" />
       <part file="autofill_payments_strings.grdp" />
       <part file="autofill_prediction_improvements_strings.grdp" />
diff --git a/components/content_settings/core/common/features.cc b/components/content_settings/core/common/features.cc
index dfddd7a1caeac..a127b416fe697 100644
--- a/components/content_settings/core/common/features.cc
+++ b/components/content_settings/core/common/features.cc
@@ -113,5 +113,6 @@ BASE_FEATURE(kContentSettingsPartitioning,
              "ContentSettingsPartitioning",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
+#include "cromite_flags/components_content_settings_core_common_features_cc.inc"
 }  // namespace features
 }  // namespace content_settings
diff --git a/components/cromite_components_strings_grd/placeholder.txt b/components/cromite_components_strings_grd/placeholder.txt
new file mode 100644
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/components/cromite_components_strings_grd/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/components/flags_ui/flags_state.cc b/components/flags_ui/flags_state.cc
index 1f7055d8b9d2e..006334fb4b5d3 100644
--- a/components/flags_ui/flags_state.cc
+++ b/components/flags_ui/flags_state.cc
@@ -365,6 +365,21 @@ void FlagsState::GetSwitchesAndFeaturesFromFlags(
 
   for (const std::string& entry_name : enabled_entries) {
     const auto& entry_it = name_to_switch_map.find(entry_name);
+    if (entry_it == name_to_switch_map.end()) {
+      // check if is a cromite feature
+      std::string::size_type pos = entry_name.find('@');
+      if (pos != std::string::npos) {
+        std::string feature_name = entry_name.substr(0, pos);
+        if (base::FeatureList::IsCromiteFlag(feature_name)) {
+          if (entry_name.ends_with("@1"))
+            features->insert(entry_name + ":enabled");
+          else
+            features->insert(entry_name + ":disabled");
+          continue;
+        }
+      }
+      NOTREACHED();
+    }
     CHECK(entry_it != name_to_switch_map.end(), base::NotFatalUntil::M130);
 
     const SwitchEntry& entry = entry_it->second;
@@ -682,6 +697,27 @@ void FlagsState::GetFlagFeatureEntries(
       data.Set("links", std::move(links));
     }
 
+    if (entry.type == FeatureEntry::FEATURE_VALUE
+        || entry.type == FeatureEntry::FEATURE_WITH_PARAMS_VALUE) {
+      DCHECK(entry.feature.feature);
+      if (base::FeatureList::IsCromiteChanged(*entry.feature.feature)) {
+        bool is_enabled = base::FeatureList::GetCromiteChange(*entry.feature.feature);
+        data.Set("is_cromite", true);
+        data.Set("default_value",
+          is_enabled ? "enabled" : "disabled");
+      } else {
+        bool is_enabled = entry.feature.feature->default_state == base::FEATURE_ENABLED_BY_DEFAULT;
+        data.Set("default_value", is_enabled
+            ? "enabled" : "disabled");
+        if (is_enabled)
+          data.Set("is_default_value_on", true);
+      }
+      if (entry.feature.feature->is_cromite)
+        data.Set("is_cromite", true);
+      if (entry.feature.feature->is_new)
+        data.Set("is_new", true);
+    }
+
     switch (entry.type) {
       case FeatureEntry::SINGLE_VALUE:
       case FeatureEntry::SINGLE_DISABLE_VALUE:
@@ -810,6 +846,16 @@ void FlagsState::AddSwitchesToCommandLine(
   for (const std::string& entry_name : enabled_entries) {
     const auto& entry_it = name_to_switch_map.find(entry_name);
     if (entry_it == name_to_switch_map.end()) {
+      // check if is a cromite feature
+      std::string::size_type pos = entry_name.find('@');
+      if (pos != std::string::npos) {
+        std::string feature_name = entry_name.substr(0, pos);
+        if (base::FeatureList::IsCromiteFlag(feature_name)) {
+          feature_switches[feature_name] =
+            entry_name.ends_with("@1");
+          continue;
+        }
+      }
       NOTREACHED_IN_MIGRATION();
       continue;
     }
@@ -1062,6 +1108,14 @@ const FeatureEntry* FlagsState::FindFeatureEntryByName(
 bool FlagsState::IsSupportedFeature(const FlagsStorage* storage,
                                     const std::string& name,
                                     int platform_mask) const {
+  // check if is a cromite feature
+  std::string::size_type pos = name.find('@');
+  if (pos != std::string::npos) {
+    std::string feature_name = name.substr(0, pos);
+    if (base::FeatureList::IsCromiteFlag(feature_name)) {
+      return true;
+    }
+  }
   for (const auto& entry : feature_entries_) {
     DCHECK(entry.IsValid());
     if (!(entry.supported_platforms & platform_mask))
diff --git a/components/flags_ui/resources/app.css b/components/flags_ui/resources/app.css
index 7d0cf7921fb6b..b1eac2a3e3343 100644
--- a/components/flags_ui/resources/app.css
+++ b/components/flags_ui/resources/app.css
@@ -383,3 +383,27 @@ cr-tabs {
     padding-top: 1.5rem;
   }
 }
+#appcontainer {
+  overflow-y: scroll;
+}
+.cromite #header {
+  display: none;
+}
+.cromite .blurb-container {
+  display: none;
+}
+.cromite #tabs {
+  display: none;
+}
+.cromite #tab-content-available {
+  display: none;
+}
+.cromite #tab-content-unavailable {
+  display: none;
+}
+.cromite #tab-content-cromite {
+  display: block !important;
+}
+.cromite .section-header-title {
+  display: none;
+}
diff --git a/components/flags_ui/resources/app.html.ts b/components/flags_ui/resources/app.html.ts
index e75b38a26a3fc..1d3e54ea002cc 100644
--- a/components/flags_ui/resources/app.html.ts
+++ b/components/flags_ui/resources/app.html.ts
@@ -9,6 +9,7 @@ import type {AppElement} from './app.js';
 export function getHtml(this: AppElement) {
   // clang-format off
   return html`<!--_html_template_start_-->
+<div id="appcontainer">
 <div id="header">
   <div class="flex-container">
     <div class="flex search-container">
@@ -120,6 +121,32 @@ export function getHtml(this: AppElement) {
         <div class="no-match" role="alert" hidden>$i18n{no-results}</div>
       </div>
 </if>
+      <div id="tab-content-cromite" class="tab-content"
+           ?selected="${this.isTabSelected_(2)}"
+           role="tabpanel" aria-labelledby="tab-cromite" aria-hidden="false">
+
+        <!-- Non default experiments. -->
+        <div id="non-default-cromite-experiments">
+          ${this.nonDefaultCromiteFeatures.map(feature => html`
+            <flags-experiment id="${feature.internal_name}" .data="${feature}"
+                @select-change="${this.onSelectChange_}"
+                @textarea-change="${this.onTextareaChange_}"
+                @input-change="${this.onInputChange_}">
+            </flags-experiment>
+          `)}
+        </div>
+        <!-- Experiments with default settings. -->
+        <div id="cromite-experiments">
+          ${this.defaultCromiteFeatures.map(feature => html`
+            <flags-experiment id="${feature.internal_name}" .data="${feature}"
+                @select-change="${this.onSelectChange_}"
+                @textarea-change="${this.onTextareaChange_}"
+                @input-change="${this.onInputChange_}">
+            </flags-experiment>
+          `)}
+        </div>
+        <div class="no-match" role="alert" hidden>$i18n{no-results}</div>
+      </div>
     </div>
     <div id="needs-restart">
       <div class="flex-container">
@@ -138,6 +165,7 @@ export function getHtml(this: AppElement) {
     </div>
   </div>
 </div>
+</div>
 <!--_html_template_end_-->`;
   // clang-format on
 }
diff --git a/components/flags_ui/resources/app.ts b/components/flags_ui/resources/app.ts
index 30c940de6d0f3..f82ff125abb28 100644
--- a/components/flags_ui/resources/app.ts
+++ b/components/flags_ui/resources/app.ts
@@ -128,6 +128,7 @@ export class FlagsAppElement extends CrLitElement {
     // <if expr="not is_ios">
     loadTimeData.getString('unavailable'),
     // </if>
+    "Cromite",
   ];
   protected selectedTabIndex_: number = 0;
 
@@ -149,8 +150,11 @@ export class FlagsAppElement extends CrLitElement {
 
   protected defaultFeatures: Feature[] = [];
   protected nonDefaultFeatures: Feature[] = [];
+  protected defaultCromiteFeatures: Feature[] = [];
+  protected nonDefaultCromiteFeatures: Feature[] = [];
   protected searching: boolean = false;
 
+  private onlyCromiteFlags: boolean = false;
   private announceStatusDelayMs: number = 100;
   private featuresResolver: PromiseResolver<void> = new PromiseResolver();
   private flagSearch: FlagSearch|null = null;
@@ -184,10 +188,24 @@ export class FlagsAppElement extends CrLitElement {
     if (changedPrivateProperties.has('data')) {
       const defaultFeatures: Feature[] = [];
       const nonDefaultFeatures: Feature[] = [];
+      const defaultCromiteFeatures: Feature[] = [];
+      const nonDefaultCromiteFeatures: Feature[] = [];
 
+      if (this.onlyCromiteFlags) {
+        this.data.supportedFeatures =
+          this.data.supportedFeatures.filter(item => item.is_new);
+      }
+      this.data.supportedFeatures.forEach(
+        f => (f.is_cromite
+                ? (f.is_default ? defaultCromiteFeatures : nonDefaultCromiteFeatures).push(f)
+                : undefined));
+      this.data.supportedFeatures.sort(
+        (a,b) => (a.internal_name.localeCompare(b.internal_name)));
       this.data.supportedFeatures.forEach(
           f => (f.is_default ? defaultFeatures : nonDefaultFeatures).push(f));
 
+      this.defaultCromiteFeatures = defaultCromiteFeatures;
+      this.nonDefaultCromiteFeatures = nonDefaultCromiteFeatures;
       this.defaultFeatures = defaultFeatures;
       this.nonDefaultFeatures = nonDefaultFeatures;
     }
@@ -228,6 +246,11 @@ export class FlagsAppElement extends CrLitElement {
   override connectedCallback() {
     super.connectedCallback();
 
+    if (location.pathname == '/cromite') {
+      this.onlyCromiteFlags = true;
+      this.getRequiredElement("#appcontainer").classList.add('cromite');
+      document.title = "Cromite Flags List";
+    }
     // <if expr="not is_ios">
     const pathname = new URL(window.location.href).pathname;
     this.isFlagsDeprecatedUrl_ =
diff --git a/components/flags_ui/resources/experiment.css b/components/flags_ui/resources/experiment.css
index c47f4192fab90..8affbe1f58bfc 100644
--- a/components/flags_ui/resources/experiment.css
+++ b/components/flags_ui/resources/experiment.css
@@ -79,6 +79,11 @@
   resize: none;
 }
 
+.experiment-on select {
+  background: #dddddd;
+  color: var(--link-color);
+}
+
 select {
   background: white;
   border: 1px solid var(--link-color);
@@ -172,7 +177,6 @@ input {
   .experiment .experiment-actions {
     max-width: 100%;
     padding-top: 12px;
-    text-align: left; /* csschecker-disable-line left-right */
     width: 100%;
   }
 
@@ -180,7 +184,6 @@ input {
   .body {
     overflow: hidden;
     text-overflow: ellipsis;
-    white-space: nowrap;
     width: 100%;
   }
 
diff --git a/components/flags_ui/resources/experiment.html.ts b/components/flags_ui/resources/experiment.html.ts
index 9d473c91e7f9f..32869c80bb200 100644
--- a/components/flags_ui/resources/experiment.html.ts
+++ b/components/flags_ui/resources/experiment.html.ts
@@ -10,7 +10,8 @@ export function getHtml(this: ExperimentElement) {
   // clang-format off
   return html`<!--_html_template_start_-->
 <div class="experiment" id="${this.feature_.internal_name}">
-  <div class="flex-container">
+  <div class="flex-container" class="${(this.feature_.is_cromite && this.feature_.is_new ? "cromite " : "")
+                                       + (this.feature_.is_default_value_on ? "experiment-on" : "")}">
     <div class="flex">
       ${this.showingSearchHit_? html`
         <h2 class="experiment-name clone" id="${this.getHeaderId_()}"
@@ -86,7 +87,9 @@ export function getHtml(this: ExperimentElement) {
             @change="${this.onExperimentSelectChange_}">
           ${this.feature_.options!.map(option => html`
             <option ?selected="${option.selected}">
-              ${option.description}
+              ${option.description == "Default" && this.feature_.default_value !== undefined
+                  ? option.description + " (" + this.feature_.default_value + ")"
+                  : option.description}
             </option>
           `)}
         </select>
diff --git a/components/flags_ui/resources/experiment.ts b/components/flags_ui/resources/experiment.ts
index 8cb2dbf1bdc66..fbc9681f64868 100644
--- a/components/flags_ui/resources/experiment.ts
+++ b/components/flags_ui/resources/experiment.ts
@@ -81,6 +81,11 @@ export class ExperimentElement extends CrLitElement {
     enabled: false,
     is_default: false,
     supported_platforms: [],
+    is_default_value_on: false,
+    default_value: '',
+    is_cromite: false,
+    is_new: false,
+    permalink: true,
   };
 
   // Whether the controls to change the experiment state should be hidden.
@@ -127,12 +132,15 @@ export class ExperimentElement extends CrLitElement {
   }
 
   protected getExperimentTitle_(): string {
+    const suffix =
+      this.feature_.is_cromite && this.feature_.is_new
+        ? " (Cromite flag)" : "";
     if (this.showEnableDisableSelect_()) {
-      return this.isDefault_ ? '' :
-                               loadTimeData.getString('experiment-enabled');
+      return (this.isDefault_ ? '' :
+                               loadTimeData.getString('experiment-enabled')) + suffix;
     }
 
-    return '';
+    return suffix;
   }
 
   protected getPlatforms_(): string {
diff --git a/components/flags_ui/resources/flags_browser_proxy.ts b/components/flags_ui/resources/flags_browser_proxy.ts
index 3d2cc789410ff..16953f14289b9 100644
--- a/components/flags_ui/resources/flags_browser_proxy.ts
+++ b/components/flags_ui/resources/flags_browser_proxy.ts
@@ -16,6 +16,11 @@ export interface Feature {
   description: string;
   enabled: boolean;
   is_default: boolean;
+  is_default_value_on: boolean;
+  default_value: string;
+  is_cromite: boolean;
+  is_new: boolean;
+  permalink: boolean;
   supported_platforms: string[];
   origin_list_value?: string;
   string_value?: string;
diff --git a/components/offline_pages/core/offline_page_feature.cc b/components/offline_pages/core/offline_page_feature.cc
index ad497780ad722..dac707ab8583c 100644
--- a/components/offline_pages/core/offline_page_feature.cc
+++ b/components/offline_pages/core/offline_page_feature.cc
@@ -48,4 +48,5 @@ bool IsOfflinePagesNetworkStateLikelyUnknown() {
   return base::FeatureList::IsEnabled(kOfflinePagesNetworkStateLikelyUnknown);
 }
 
+#include "cromite_flags/components_offline_pages_core_offline_page_feature_cc.inc"
 }  // namespace offline_pages
diff --git a/components/offline_pages/core/offline_page_feature.h b/components/offline_pages/core/offline_page_feature.h
index 4ba9bc80778ab..8d5198dea6d79 100644
--- a/components/offline_pages/core/offline_page_feature.h
+++ b/components/offline_pages/core/offline_page_feature.h
@@ -42,6 +42,7 @@ bool IsOnTheFlyMhtmlHashComputationEnabled();
 // offline pages to avoid showing them even when the device is online.
 bool IsOfflinePagesNetworkStateLikelyUnknown();
 
+#include "cromite_flags/components_offline_pages_core_offline_page_feature_h.inc"
 }  // namespace offline_pages
 
 #endif  // COMPONENTS_OFFLINE_PAGES_CORE_OFFLINE_PAGE_FEATURE_H_
diff --git a/components/password_manager/core/browser/features/password_features.cc b/components/password_manager/core/browser/features/password_features.cc
index 4b8616245c10b..947a8241a4e3f 100644
--- a/components/password_manager/core/browser/features/password_features.cc
+++ b/components/password_manager/core/browser/features/password_features.cc
@@ -193,4 +193,5 @@ BASE_FEATURE(kImprovedPasswordChangeService,
              "ImprovedPasswordChangeService",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
+#include "cromite_flags/components_password_manager_core_browser_features_password_features_cc.inc"
 }  // namespace password_manager::features
diff --git a/components/permissions/features.cc b/components/permissions/features.cc
index 241f03d460658..4ab9084421640 100644
--- a/components/permissions/features.cc
+++ b/components/permissions/features.cc
@@ -153,6 +153,7 @@ BASE_FEATURE(kCpssQuietChipTextUpdate,
 BASE_FEATURE(kCpssUseTfliteSignatureRunner,
              "CpssUseTfliteSignatureRunner",
              base::FEATURE_DISABLED_BY_DEFAULT);
+#include "cromite_flags/components_permissions_features_cc.inc"
 }  // namespace features
 namespace feature_params {
 
diff --git a/components/variations/synthetic_trials_active_group_id_provider.cc b/components/variations/synthetic_trials_active_group_id_provider.cc
index bd51697297471..51de90d0e91a3 100644
--- a/components/variations/synthetic_trials_active_group_id_provider.cc
+++ b/components/variations/synthetic_trials_active_group_id_provider.cc
@@ -27,7 +27,7 @@ SyntheticTrialsActiveGroupIdProvider::GetActiveGroupIds() {
   return group_ids_;
 }
 
-#if !defined(NDEBUG)
+#if true
 std::vector<SyntheticTrialGroup>
 SyntheticTrialsActiveGroupIdProvider::GetGroups() {
   base::AutoLock scoped_lock(lock_);
@@ -53,7 +53,7 @@ void SyntheticTrialsActiveGroupIdProvider::OnSyntheticTrialsChanged(
     for (const auto& group : groups) {
       group_ids_.push_back(group.id());
     }
-#if !defined(NDEBUG)
+#if true
     groups_ = groups;
 #endif  // !defined(NDEBUG)
   }
diff --git a/components/variations/synthetic_trials_active_group_id_provider.h b/components/variations/synthetic_trials_active_group_id_provider.h
index b4a999731d996..ef17ac6669665 100644
--- a/components/variations/synthetic_trials_active_group_id_provider.h
+++ b/components/variations/synthetic_trials_active_group_id_provider.h
@@ -36,7 +36,7 @@ class COMPONENT_EXPORT(VARIATIONS) SyntheticTrialsActiveGroupIdProvider
   // Returns currently active synthetic trial group IDs.
   std::vector<ActiveGroupId> GetActiveGroupIds();
 
-#if !defined(NDEBUG)
+#if true
   // In debug mode, not only the group IDs are tracked but also the full group
   // info, to display the names unhashed in chrome://version.
   std::vector<SyntheticTrialGroup> GetGroups();
@@ -60,7 +60,7 @@ class COMPONENT_EXPORT(VARIATIONS) SyntheticTrialsActiveGroupIdProvider
 
   base::Lock lock_;
   std::vector<ActiveGroupId> group_ids_;  // GUARDED_BY(lock_);
-#if !defined(NDEBUG)
+#if true
   // In debug builds, keep the full group information to be able to display it
   // in chrome://version.
   std::vector<SyntheticTrialGroup> groups_;  // GUARDED_BY(lock_);
diff --git a/components/version_ui/version_handler_helper.cc b/components/version_ui/version_handler_helper.cc
index d2e53e1d22801..ae5364f681ece 100644
--- a/components/version_ui/version_handler_helper.cc
+++ b/components/version_ui/version_handler_helper.cc
@@ -20,7 +20,7 @@
 namespace version_ui {
 namespace {
 
-#if !defined(NDEBUG)
+#if true
 std::string GetActiveGroupNameAsString(
     const base::FieldTrial::ActiveGroup& group) {
   static const unsigned char kNonBreakingHyphenUTF8[] = {0xE2, 0x80, 0x91,
@@ -56,7 +56,7 @@ base::Value::List GetVariationsList() {
   base::FieldTrialListIncludingLowAnonymity::GetActiveFieldTrialGroups(
       &active_groups);
 
-#if !defined(NDEBUG)
+#if true
   for (const auto& group : active_groups) {
     variations.push_back(GetActiveGroupNameAsString(group));
   }
diff --git a/content/common/features.cc b/content/common/features.cc
index 33793983daeed..7aed1ec6cdf79 100644
--- a/content/common/features.cc
+++ b/content/common/features.cc
@@ -619,4 +619,5 @@ BASE_FEATURE(kLimitCrossOriginNonActivatedPaintHolding,
 
 // Please keep features in alphabetical order.
 
+#include "cromite_flags/content_common_features_cc.inc"
 }  // namespace features
diff --git a/content/public/common/content_features.cc b/content/public/common/content_features.cc
index 134681c4a99cb..8e57f40a3fac0 100644
--- a/content/public/common/content_features.cc
+++ b/content/public/common/content_features.cc
@@ -1498,4 +1498,5 @@ bool IsVideoCaptureServiceEnabledForBrowserProcess() {
          VideoCaptureServiceConfiguration::kEnabledForBrowserProcess;
 }
 
+#include "cromite_flags/content_public_common_content_features_cc.inc"
 }  // namespace features
diff --git a/content/public/common/content_features.h b/content/public/common/content_features.h
index 536bbcdad8af2..9ca7bca370de0 100644
--- a/content/public/common/content_features.h
+++ b/content/public/common/content_features.h
@@ -352,6 +352,7 @@ CONTENT_EXPORT extern const base::FeatureParam<std::string>
 CONTENT_EXPORT bool IsVideoCaptureServiceEnabledForOutOfProcess();
 CONTENT_EXPORT bool IsVideoCaptureServiceEnabledForBrowserProcess();
 
+#include "cromite_flags/content_public_common_content_features_h.inc"
 }  // namespace features
 
 #endif  // CONTENT_PUBLIC_COMMON_CONTENT_FEATURES_H_
diff --git a/cromite_flags/BUILD.gn b/cromite_flags/BUILD.gn
new file mode 100755
index 0000000000000..82b9b3e1a869c
--- /dev/null
+++ b/cromite_flags/BUILD.gn
@@ -0,0 +1,174 @@
+# This file is part of Bromite.
+
+# Bromite is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+
+# Bromite is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+
+# You should have received a copy of the GNU General Public License
+# along with Bromite. If not, see <https://www.gnu.org/licenses/>.
+
+# for placeholder.txt:
+#
+# this file is intentionally empty
+#
+
+cpp_bromite_include("chrome_browser_about_flags_cc") {
+  inputs = [ "//cromite_flags/chrome/browser/about_flags_cc/placeholder.txt" ]
+  output_file = "chrome_browser_about_flags_cc.inc"
+}
+
+cpp_bromite_include("chrome_common_chrome_features_cc") {
+  inputs = [ "//cromite_flags/chrome/common/chrome_features_cc/placeholder.txt" ]
+  output_file = "chrome_common_chrome_features_cc.inc"
+}
+
+cpp_bromite_include("content_common_features_cc") {
+  inputs = [ "//cromite_flags/content/common/features_cc/placeholder.txt" ]
+  output_file = "content_common_features_cc.inc"
+}
+
+cpp_bromite_include("content_public_common_content_features_h") {
+  inputs = [ "//cromite_flags/content/public/common/content_features_h/placeholder.txt" ]
+  output_file = "content_public_common_content_features_h.inc"
+}
+
+cpp_bromite_include("content_public_common_content_features_cc") {
+  inputs = [ "//cromite_flags/content/public/common/content_features_cc/placeholder.txt" ]
+  output_file = "content_public_common_content_features_cc.inc"
+}
+
+cpp_bromite_include("third_party_blink_common_features_cc") {
+  inputs = [ "//cromite_flags/third_party/blink/common/features_cc/placeholder.txt" ]
+  output_file = "third_party_blink_common_features_cc.inc"
+}
+
+cpp_bromite_include("third_party_blink_common_features_h") {
+  inputs = [ "//cromite_flags/third_party/blink/common/features_h/placeholder.txt" ]
+  output_file = "third_party_blink_common_features_h.inc"
+}
+
+cpp_bromite_include("chrome_browser_flags_android_chrome_feature_list_cc") {
+  inputs = [ "//cromite_flags/chrome/browser/flags/android/chrome_feature_list_cc/placeholder.txt" ]
+  output_file = "chrome_browser_flags_android_chrome_feature_list_cc.inc"
+}
+
+cpp_bromite_include("chrome_browser_flags_android_chrome_feature_list_h") {
+  inputs = [ "//cromite_flags/chrome/browser/flags/android/chrome_feature_list_h/placeholder.txt" ]
+  output_file = "chrome_browser_flags_android_chrome_feature_list_h.inc"
+}
+
+cpp_bromite_include("chrome_browser_browser_features_cc") {
+  inputs = [ "//cromite_flags/chrome/browser/browser_features_cc/placeholder.txt" ]
+  output_file = "chrome_browser_browser_features_cc.inc"
+}
+
+cpp_bromite_include("chrome_browser_browser_features_h") {
+  inputs = [ "//cromite_flags/chrome/browser/browser_features_h/placeholder.txt" ]
+  output_file = "chrome_browser_browser_features_h.inc"
+}
+
+cpp_bromite_include("chrome_browser_ui_ui_features_cc") {
+  inputs = [ "//cromite_flags/chrome/browser/ui/ui_features_cc/placeholder.txt" ]
+  output_file = "chrome_browser_ui_ui_features_cc.inc"
+}
+
+cpp_bromite_include("media_base_media_switches_cc") {
+  inputs = [ "//cromite_flags/media/base/media_switches_cc/placeholder.txt" ]
+  output_file = "media_base_media_switches_cc.inc"
+}
+
+cpp_bromite_include("media_base_media_switches_h") {
+  inputs = [ "//cromite_flags/media/base/media_switches_h/placeholder.txt" ]
+  output_file = "media_base_media_switches_h.inc"
+}
+
+cpp_bromite_include("components_content_settings_core_common_features_cc") {
+  inputs = [ "//cromite_flags/components/content_settings/core/common/features_cc/placeholder.txt" ]
+  output_file = "components_content_settings_core_common_features_cc.inc"
+}
+
+cpp_bromite_include("components_permissions_features_cc") {
+  inputs = [ "//cromite_flags/components/permissions/features_cc/placeholder.txt" ]
+  output_file = "components_permissions_features_cc.inc"
+}
+
+cpp_bromite_include("components_offline_pages_core_offline_page_feature_cc") {
+  inputs = [ "//cromite_flags/components/offline_pages/core/offline_page_feature_cc/placeholder.txt" ]
+  output_file = "components_offline_pages_core_offline_page_feature_cc.inc"
+}
+
+cpp_bromite_include("components_offline_pages_core_offline_page_feature_h") {
+  inputs = [ "//cromite_flags/components/offline_pages/core/offline_page_feature_h/placeholder.txt" ]
+  output_file = "components_offline_pages_core_offline_page_feature_h.inc"
+}
+
+cpp_bromite_include("net_base_features_cc") {
+  inputs = [ "//cromite_flags/net/base/features_cc/placeholder.txt" ]
+  output_file = "net_base_features_cc.inc"
+}
+
+cpp_bromite_include("net_base_features_h") {
+  inputs = [ "//cromite_flags/net/base/features_h/placeholder.txt" ]
+  output_file = "net_base_features_h.inc"
+}
+
+cpp_bromite_include("services_network_public_cpp_features_cc") {
+  inputs = [ "//cromite_flags/services/network/public/cpp/features_cc/placeholder.txt" ]
+  output_file = "services_network_public_cpp_features_cc.inc"
+}
+
+cpp_bromite_include("services_network_public_cpp_features_h") {
+  inputs = [ "//cromite_flags/services/network/public/cpp/features_h/placeholder.txt" ]
+  output_file = "services_network_public_cpp_features_h.inc"
+}
+
+cpp_bromite_include("ui_base_features_cc") {
+  inputs = [ "//cromite_flags/ui/base/features_cc/placeholder.txt" ]
+  output_file = "ui_base_features_cc.inc"
+}
+
+cpp_bromite_include("ui_base_features_h") {
+  inputs = [ "//cromite_flags/ui/base/features_h/placeholder.txt" ]
+  output_file = "ui_base_features_h.inc"
+}
+
+cpp_bromite_include("components_password_manager_core_browser_features_password_features_cc") {
+  inputs = [ "//cromite_flags/components/password_manager/core/browser/features/password_features_cc/placeholder.txt" ]
+  output_file = "components_password_manager_core_browser_features_password_features_cc.inc"
+}
+
+component("cromite_flags") {
+  deps = [
+    ":content_common_features_cc",
+    ":content_public_common_content_features_cc",
+    ":content_public_common_content_features_h",
+    ":components_content_settings_core_common_features_cc",
+    ":components_permissions_features_cc",
+    ":components_offline_pages_core_offline_page_feature_cc",
+    ":components_offline_pages_core_offline_page_feature_h",
+    ":components_password_manager_core_browser_features_password_features_cc",
+    ":media_base_media_switches_cc",
+    ":media_base_media_switches_h",
+    ":net_base_features_cc",
+    ":net_base_features_h",
+    ":chrome_common_chrome_features_cc",
+    ":chrome_browser_about_flags_cc",
+    ":chrome_browser_flags_android_chrome_feature_list_cc",
+    ":chrome_browser_flags_android_chrome_feature_list_h",
+    ":chrome_browser_ui_ui_features_cc",
+    ":chrome_browser_browser_features_cc",
+    ":chrome_browser_browser_features_h",
+    ":services_network_public_cpp_features_cc",
+    ":services_network_public_cpp_features_h",
+    ":third_party_blink_common_features_cc",
+    ":third_party_blink_common_features_h",
+    ":ui_base_features_cc",
+    ":ui_base_features_h",
+  ]
+}
diff --git a/cromite_flags/chrome/browser/about_flags_cc/placeholder.txt b/cromite_flags/chrome/browser/about_flags_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/chrome/browser/about_flags_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/chrome/browser/browser_features_cc/placeholder.txt b/cromite_flags/chrome/browser/browser_features_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/chrome/browser/browser_features_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/chrome/browser/browser_features_h/placeholder.txt b/cromite_flags/chrome/browser/browser_features_h/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/chrome/browser/browser_features_h/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/chrome/browser/flags/android/chrome_feature_list_cc/placeholder.txt b/cromite_flags/chrome/browser/flags/android/chrome_feature_list_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/chrome/browser/flags/android/chrome_feature_list_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/chrome/browser/flags/android/chrome_feature_list_h/placeholder.txt b/cromite_flags/chrome/browser/flags/android/chrome_feature_list_h/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/chrome/browser/flags/android/chrome_feature_list_h/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/chrome/browser/ui/ui_features_cc/placeholder.txt b/cromite_flags/chrome/browser/ui/ui_features_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/chrome/browser/ui/ui_features_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/chrome/common/chrome_features_cc/placeholder.txt b/cromite_flags/chrome/common/chrome_features_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/chrome/common/chrome_features_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/chrome/common/chrome_features_h/placeholder.txt b/cromite_flags/chrome/common/chrome_features_h/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/chrome/common/chrome_features_h/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/components/content_settings/core/common/features_cc/placeholder.txt b/cromite_flags/components/content_settings/core/common/features_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/components/content_settings/core/common/features_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/components/offline_pages/core/offline_page_feature_cc/placeholder.txt b/cromite_flags/components/offline_pages/core/offline_page_feature_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/components/offline_pages/core/offline_page_feature_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/components/offline_pages/core/offline_page_feature_h/placeholder.txt b/cromite_flags/components/offline_pages/core/offline_page_feature_h/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/components/offline_pages/core/offline_page_feature_h/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/components/password_manager/core/browser/features/password_features_cc/placeholder.txt b/cromite_flags/components/password_manager/core/browser/features/password_features_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/components/password_manager/core/browser/features/password_features_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/components/permissions/features_cc/placeholder.txt b/cromite_flags/components/permissions/features_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/components/permissions/features_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/content/common/features_cc/placeholder.txt b/cromite_flags/content/common/features_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/content/common/features_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/content/public/common/content_features_cc/placeholder.txt b/cromite_flags/content/public/common/content_features_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/content/public/common/content_features_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/content/public/common/content_features_h/placeholder.txt b/cromite_flags/content/public/common/content_features_h/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/content/public/common/content_features_h/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/media/base/media_switches_cc/placeholder.txt b/cromite_flags/media/base/media_switches_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/media/base/media_switches_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/media/base/media_switches_h/placeholder.txt b/cromite_flags/media/base/media_switches_h/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/media/base/media_switches_h/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/net/base/features_cc/placeholder.txt b/cromite_flags/net/base/features_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/net/base/features_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/net/base/features_h/placeholder.txt b/cromite_flags/net/base/features_h/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/net/base/features_h/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/services/network/public/cpp/features_cc/placeholder.txt b/cromite_flags/services/network/public/cpp/features_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/services/network/public/cpp/features_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/services/network/public/cpp/features_h/placeholder.txt b/cromite_flags/services/network/public/cpp/features_h/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/services/network/public/cpp/features_h/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/third_party/blink/common/features_cc/placeholder.txt b/cromite_flags/third_party/blink/common/features_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/third_party/blink/common/features_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/third_party/blink/common/features_h/placeholder.txt b/cromite_flags/third_party/blink/common/features_h/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/third_party/blink/common/features_h/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/ui/base/features_cc/placeholder.txt b/cromite_flags/ui/base/features_cc/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/ui/base/features_cc/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/cromite_flags/ui/base/features_h/placeholder.txt b/cromite_flags/ui/base/features_h/placeholder.txt
new file mode 100755
index 0000000000000..5174b09c2273b
--- /dev/null
+++ b/cromite_flags/ui/base/features_h/placeholder.txt
@@ -0,0 +1 @@
+this file is intentionally empty
diff --git a/media/base/media_switches.cc b/media/base/media_switches.cc
index d5695e08eb073..096e576f20500 100644
--- a/media/base/media_switches.cc
+++ b/media/base/media_switches.cc
@@ -1837,5 +1837,5 @@ uint32_t GetPassthroughAudioFormats() {
   return 0;
 #endif  // BUILDFLAG(ENABLE_PASSTHROUGH_AUDIO_CODECS)
 }
-
+#include "cromite_flags/media_base_media_switches_cc.inc"
 }  // namespace media
diff --git a/media/base/media_switches.h b/media/base/media_switches.h
index ad7388348eca1..e4c833b06502d 100644
--- a/media/base/media_switches.h
+++ b/media/base/media_switches.h
@@ -572,5 +572,5 @@ MEDIA_EXPORT OOPVDMode GetOutOfProcessVideoDecodingMode();
 MEDIA_EXPORT uint32_t GetPassthroughAudioFormats();
 
 }  // namespace media
-
+#include "cromite_flags/media_base_media_switches_h.inc"
 #endif  // MEDIA_BASE_MEDIA_SWITCHES_H_
diff --git a/net/base/features.cc b/net/base/features.cc
index 76a0e11ffb6ba..7629a8bb41e09 100644
--- a/net/base/features.cc
+++ b/net/base/features.cc
@@ -629,4 +629,5 @@ BASE_FEATURE(kIgnoreHSTSForLocalhost,
              "IgnoreHSTSForLocalhost",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
+#include "cromite_flags/net_base_features_cc.inc"
 }  // namespace net::features
diff --git a/net/base/features.h b/net/base/features.h
index a2f9c2b919a31..a74f8711cc909 100644
--- a/net/base/features.h
+++ b/net/base/features.h
@@ -650,6 +650,7 @@ NET_EXPORT extern const base::FeatureParam<DiskCacheBackend>
 // If enabled, ignore Strict-Transport-Security for [*.]localhost hosts.
 NET_EXPORT BASE_DECLARE_FEATURE(kIgnoreHSTSForLocalhost);
 
+#include "cromite_flags/net_base_features_h.inc"
 }  // namespace net::features
 
 #endif  // NET_BASE_FEATURES_H_
diff --git a/services/network/public/cpp/features.cc b/services/network/public/cpp/features.cc
index 5cb4dab03d3f4..da1739d593b4b 100644
--- a/services/network/public/cpp/features.cc
+++ b/services/network/public/cpp/features.cc
@@ -475,4 +475,5 @@ BASE_FEATURE(kEnableLockCookieDatabaseByDefault,
              base::FEATURE_ENABLED_BY_DEFAULT);
 #endif  // BUILDFLAG(IS_WIN)
 
+#include "cromite_flags/services_network_public_cpp_features_cc.inc"
 }  // namespace network::features
diff --git a/services/network/public/cpp/features.h b/services/network/public/cpp/features.h
index 58e41f92da8a9..0545a52c72c4c 100644
--- a/services/network/public/cpp/features.h
+++ b/services/network/public/cpp/features.h
@@ -211,6 +211,7 @@ COMPONENT_EXPORT(NETWORK_CPP)
 BASE_DECLARE_FEATURE(kEnableLockCookieDatabaseByDefault);
 #endif  // BUILDFLAG(IS_WIN)
 
+#include "cromite_flags/services_network_public_cpp_features_h.inc"
 }  // namespace network::features
 
 #endif  // SERVICES_NETWORK_PUBLIC_CPP_FEATURES_H_
diff --git a/third_party/blink/common/features.cc b/third_party/blink/common/features.cc
index e7224e03e80f8..1ad3e8a13ae95 100644
--- a/third_party/blink/common/features.cc
+++ b/third_party/blink/common/features.cc
@@ -2932,4 +2932,5 @@ bool IsCanvasSharedBitmapConversionEnabled() {
 //
 // DO NOT ADD NEW FEATURES HERE.
 
+#include "cromite_flags/third_party_blink_common_features_cc.inc"
 }  // namespace blink::features
diff --git a/third_party/blink/public/common/features.h b/third_party/blink/public/common/features.h
index e8f79c39e03f5..4eba143c1123f 100644
--- a/third_party/blink/public/common/features.h
+++ b/third_party/blink/public/common/features.h
@@ -1886,6 +1886,7 @@ BLINK_COMMON_EXPORT bool IsCanvasSharedBitmapConversionEnabled();
 //
 // DO NOT ADD NEW FEATURES HERE.
 
+#include "cromite_flags/third_party_blink_common_features_h.inc"
 }  // namespace features
 }  // namespace blink
 
diff --git a/ui/base/ui_base_features.cc b/ui/base/ui_base_features.cc
index 6a4eaa26c90a9..047fa1e5c35da 100644
--- a/ui/base/ui_base_features.cc
+++ b/ui/base/ui_base_features.cc
@@ -503,4 +503,5 @@ BASE_FEATURE(kAsyncFullscreenWindowState,
              "AsyncFullscreenWindowState",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
+#include "cromite_flags/ui_base_features_cc.inc"
 }  // namespace features
diff --git a/ui/base/ui_base_features.h b/ui/base/ui_base_features.h
index 6182776562a8b..c75d4d4d6053e 100644
--- a/ui/base/ui_base_features.h
+++ b/ui/base/ui_base_features.h
@@ -259,6 +259,7 @@ BASE_DECLARE_FEATURE(kWriteBookmarkWithoutTitle);
 COMPONENT_EXPORT(UI_BASE_FEATURES)
 BASE_DECLARE_FEATURE(kAsyncFullscreenWindowState);
 
+#include "cromite_flags/ui_base_features_h.inc"
 }  // namespace features
 
 #endif  // UI_BASE_UI_BASE_FEATURES_H_
-- 
2.48.1

